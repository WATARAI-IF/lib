<?php
//_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
//--------------------------------------------------------------------
// 共通変数を定義しておきます
//	本来、define()とかconstantを使って定数化したほうがいいのですが、
//	汎用性を考えて配列をつかったほうが良いものを定義して行きましょう。
//	定数で問題ないものはdefine.phpを使います。
//	定数ではないので、スクリプト内で書き換えしないよう注意してください。
//
//--------------------------------------------------------------------
// @filename	literal.php
// @create		2011-12-01
// @author		n.ooseki
//
// Subversionのcommit情報
//   $Date$
//   $Rev$
//   $Author$
//
//--------------------------------------------------------------------
// List of Function
//--------------------------------------------------------------------
// 
//_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/

require_once( 'config.php' );
require_once( DIR_LIB_COMMON . 'define.php' );

class ConstArray{

	protected $const_array;

	function __construct() 
	{
		$this->const_array = array(
				//曜日
				"WEEK_NAME" => array(
					0				=>"日",
					1				=>"月",
					2				=>"火",
					3				=>"水",
					4				=>"木",
					5				=>"金",
					6				=>"土",
				),
		);
	}


	//********************************************************************
	//  関数名：getArray()
	//  概要　：指定した配列を返します
	//
	//     パラメータ    R/W            内容
	// -----------------+---+---------------------------------------------
	//  戻り値： 配列
	//********************************************************************

	function getArray($hash_name) 
	{
		if( !isset($this->const_array[$hash_name]) ){
			return array();
		}

		return $this->const_array[$hash_name];
	}


	//********************************************************************
	//  関数名：getKeyValueList()
	//  概要　：指定した配列のkeyとvalueのリストを返します
	//
	//     パラメータ    R/W            内容
	// -----------------+---+---------------------------------------------
	//  戻り値： 配列
	//********************************************************************

	function getKeyValueList($hash_name) 
	{
		$list = array();
		foreach($this->const_array[$hash_name] as $key=>$value){
			$list[] = array("key"=>$key, "value"=>$value);
		}

		return $list;
	}


	//********************************************************************
	//  関数名：getValueByKey()
	//  概要　：配列名とkeyの値からvalueを返します
	//
	//     パラメータ    R/W            内容
	// -----------------+---+---------------------------------------------
	//  戻り値： 値
	//********************************************************************

	function getValueByKey($hash_name, $key) 
	{
		if(isset($this->const_array[$hash_name][$key])){
			return $this->const_array[$hash_name][$key];
		}

		return null;
	}


	//********************************************************************
	//  関数名：getValueByKey()
	//  概要　：配列名とvalueの値から最後に見つかったkeyを返します
	//
	//     パラメータ    R/W            内容
	// -----------------+---+---------------------------------------------
	//  戻り値： 値
	//********************************************************************

	function getKeyByValue($hash_name, $value) 
	{
		$flip = array_flip ( $this->const_array[$hash_name] );

		if(isset($flip[$value])){
			return $flip[$value];
		}
		return null;
	}


	//********************************************************************
	//  関数名：getKeyList()
	//  概要　：keyの配列を返します
	//
	//     パラメータ    R/W            内容
	// -----------------+---+---------------------------------------------
	//  戻り値： 値
	//********************************************************************

	function getKeyList($hash_name) 
	{
		return array_keys($this->const_array[$hash_name]);
	}


	//********************************************************************
	//  関数名：existKey()
	//  概要　：配列にkeyが存在するかどうかチェックします
	//
	//     パラメータ    R/W            内容
	// -----------------+---+---------------------------------------------
	//  戻り値： 値
	//********************************************************************

	function existKey($hash_name, $key) 
	{
		return array_key_exists ($key, $this->const_array[$hash_name]);
	}

};

?>